buildscript {

    ext {
        springBootVersion = '2.6.7'
        springCloudVersion = '2021.0.3-SNAPSHOT'
        springManagementPluginVersion = '1.0.11.RELEASE'
        sonarqubeVersion = '3.3'
    }

    repositories {
        maven {
            allowInsecureProtocol = true
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springManagementPluginVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
    }

}

plugins {
    id "org.sonarqube" version "${sonarqubeVersion}"
}

apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}

ext {
    junitVersion = '5.8.2'
    lombokVersion = '1.18.22'
}

allprojects {

    group 'org.seilea'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    // 排除 bootJar 指定Main方法
    project(":common") {
        bootJar { enabled = false }
        jar { enabled = true }
    }

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        maven {
            allowInsecureProtocol = true
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }

}

subprojects {

    // 在subprojects段中添加以下块内容
    sonarqube {
        properties {
            // 如果同时存在src/main/java与src/main/test，则要按以下方式设置，如果没有单元测试用例目录test，也可以只填写src
            property "sonar.sources", "src/main/java"
        }
    }

    dependencies {
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
    }

    jar {
        manifest.attributes provider: 'gradle'
    }

    test {
        useJUnitPlatform()
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }

    checkstyle {
        toolVersion = '9.3'
        configFile rootProject.file('checkstyle/checkstyle.xml')
        sourceSets = [project.sourceSets.main]
        ignoreFailures = false
        showViolations = true
    }

}
